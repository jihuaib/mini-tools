// BGP default port number
const BGP_DEFAULT_PORT = 179;

const BGP_HEAD_LEN = 19; // 含16字节marker + 3字节固定头部

const BGP_MAX_PKT_SIZE = 4096;

// BGP version number
const BGP_VERSION = 4;

// BGP marker length (16 bytes of 0xff)
const BGP_MARKER_LEN = 16;

const BGP_STATE = {
    IDLE: 'Idle',
    CONNECT: 'Connect',
    ACTIVE: 'Active',
    OPEN_SENT: 'OpenSent',
    OPEN_CONFIRM: 'OpenConfirm',
    ESTABLISHED: 'Established'
};

const BGP_PACKET_TYPE = {
    OPEN: 1,
    UPDATE: 2,
    NOTIFICATION: 3,
    KEEPALIVE: 4,
    ROUTE_REFRESH: 5
};

// 渲染进程传入的capability
const BGP_CAPABILITY_UI = {
    ADDR_FAMILY: 1,
    ROUTE_REFRESH: 2,
    AS4: 3,
    ROLE: 4
};

const BGP_OPEN_CAP_CODE = {
    MULTIPROTOCOL_EXTENSIONS: 0x01,
    ROUTE_REFRESH: 0x02,
    FOUR_OCTET_AS: 0x41,
    BGP_ROLE: 0x09
};

const BGP_OPEN_CAP = [
    { key: BGP_CAPABILITY_UI.ADDR_FAMILY, code: BGP_OPEN_CAP_CODE.MULTIPROTOCOL_EXTENSIONS },
    { key: BGP_CAPABILITY_UI.ROUTE_REFRESH, code: BGP_OPEN_CAP_CODE.ROUTE_REFRESH },
    { key: BGP_CAPABILITY_UI.AS4, code: BGP_OPEN_CAP_CODE.FOUR_OCTET_AS },
    { key: BGP_CAPABILITY_UI.ROLE, code: BGP_OPEN_CAP_CODE.BGP_ROLE }
];

const BGP_OPEN_CAP_MAP = new Map(BGP_OPEN_CAP.map(({ key, code }) => [key, code]));

// 渲染进程传入的afi（当前保持一致）
const BGP_AFI_TYPE_UI = {
    AFI_IPV4: 1,
    AFI_IPV6: 2
};

// 协议规定的safi
const BGP_SAFI_TYPE = {
    SAFI_UNICAST: 1
};

// 渲染进程传入的role
const BGP_ROLE_UI = {
    PROVIDER: 1,
    RS: 2,
    RS_CLIENT: 3,
    CUSTOMER: 4,
    LATERAL_PEER: 5
};

// 协议规定的role
const BGP_ROLE_TYPE = {
    ROLE_PROVIDER: 0,
    ROLE_RS: 1,
    ROLE_RS_CLIENT: 2,
    ROLE_CUSTOMER: 3,
    ROLE_PEER: 4
};

const BGP_ROLE_VALUE = [
    { key: BGP_ROLE_UI.PROVIDER, code: BGP_ROLE_TYPE.ROLE_PROVIDER },
    { key: BGP_ROLE_UI.RS, code: BGP_ROLE_TYPE.ROLE_RS },
    { key: BGP_ROLE_UI.RS_CLIENT, code: BGP_ROLE_TYPE.ROLE_RS_CLIENT },
    { key: BGP_ROLE_UI.CUSTOMER, code: BGP_ROLE_TYPE.ROLE_CUSTOMER },
    { key: BGP_ROLE_UI.LATERAL_PEER, code: BGP_ROLE_TYPE.ROLE_PEER }
];

const BGP_ROLE_VALUE_MAP = new Map(BGP_ROLE_VALUE.map(({ key, code }) => [key, code]));

// BGP Path Attribute Types
const BGP_PATH_ATTR = {
    ORIGIN: 0x01,
    AS_PATH: 0x02,
    NEXT_HOP: 0x03,
    MED: 0x04,
    LOCAL_PREF: 0x05,
    ATOMIC_AGGREGATE: 0x06,
    AGGREGATOR: 0x07,
    COMMUNITY: 0x08,
    ORIGINATOR_ID: 0x09,
    CLUSTER_LIST: 0x0a,
    MP_REACH_NLRI: 0x0e,
    MP_UNREACH_NLRI: 0x0f,
    EXTENDED_COMMUNITIES: 0x10,
    AS4_PATH: 0x11,
    AS4_AGGREGATOR: 0x12
};

// BGP Path Attribute Flags
const BGP_PATH_ATTR_FLAGS = {
    OPTIONAL: 0x80,
    TRANSITIVE: 0x40,
    PARTIAL: 0x20,
    EXTENDED_LENGTH: 0x10
};

const BGP_OPEN_OPT_TYPE = {
    OPT_TYPE: 0x02
};

const BGP_ORIGIN_TYPE = {
    IGP: 0,
    EGP: 1,
    INCOMPLETE: 2
};

const BGP_AS_PATH_TYPE = {
    AS_SET: 1,
    AS_SEQUENCE: 2,
    AS_CONFED_SEQUENCE: 3,
    AS_CONFED_SET: 4
};

const BGP_ERROR_CODE = {
    MESSAGE_HEADER_ERROR: 1,
    OPEN_MESSAGE_ERROR: 2,
    UPDATE_MESSAGE_ERROR: 3,
    HOLD_TIMER_EXPIRED: 4,
    FINITE_STATE_MACHINE_ERROR: 5,
    CONNECTION_REJECTED: 6
};

const BGP_ERROR_MESSAGE_HEADER_SUBCODE = {
    CONNECTION_NOT_SYNCHRONIZED: 1,
    BAD_MESSAGE_LENGTH: 2,
    BAD_MESSAGE_TYPE: 3
};

const BGP_ERROR_OPEN_MESSAGE_SUBCODE = {
    UNSUPPORTED_VERSION_NUMBER: 1,
    BAD_PEER_AS: 2,
    BAD_BGP_IDENTIFIER: 3,
    UNSUPPORTED_OPTIONAL_PARAMETER: 4,
    AUTHENTICATION_FAILURE: 5,
    UNACCEPTABLE_HOLD_TIME: 6,
    UNSUPPORTED_CAPABILITY: 7
};

const BGP_ERROR_UPDATE_MESSAGE_SUBCODE = {
    UNSUPPORTED_ADDRESS_FAMILY: 1,
    UNSUPPORTED_NEXT_HOP_ADDRESS_FAMILY: 2,
    UNSUPPORTED_MULTICAST_ADDRESS_FAMILY: 3,
    ATTRIBUTE_FLAGS_ERROR: 4,
    ATTRIBUTE_LENGTH_ERROR: 5,
    INVALID_ORIGIN_ATTRIBUTE: 6,
    INVALID_NEXT_HOP_ATTRIBUTE: 7,
    OPTIONAL_ATTRIBUTE_ERROR: 8,
    INVALID_NETWORK_FIELD: 9,
    MALFORMED_AS_PATH: 10
};

const BGP_ERROR_CONNECTION_REJECTED_SUBCODE = {
    MAX_PREFIXES: 1,
    ADMIN_SHUTDOWN: 2,
    ADMIN_RESET: 3,
    PEER_DE_CONFIGURED: 4,
    CONNECTION_REJECTED: 5,
    CONNECTION_COLLISION_RESOLUTION: 6,
    OTHER_CONFIGURATION_CHANGE: 7,
    OUT_OF_RESOURCES: 8
};

module.exports = {
    BGP_DEFAULT_PORT,
    BGP_HEAD_LEN,
    BGP_MAX_PKT_SIZE,
    BGP_VERSION,
    BGP_MARKER_LEN,
    BGP_OPEN_CAP_MAP,
    BGP_STATE,
    BGP_PACKET_TYPE,
    BGP_CAPABILITY_UI,
    BGP_AFI_TYPE_UI,
    BGP_SAFI_TYPE,
    BGP_ROLE_UI,
    BGP_ROLE_TYPE,
    BGP_ROLE_VALUE_MAP,
    BGP_PATH_ATTR,
    BGP_PATH_ATTR_FLAGS,
    BGP_OPEN_OPT_TYPE,
    BGP_OPEN_CAP_CODE,
    BGP_ORIGIN_TYPE,
    BGP_AS_PATH_TYPE,
    BGP_ERROR_CODE,
    BGP_ERROR_MESSAGE_HEADER_SUBCODE,
    BGP_ERROR_OPEN_MESSAGE_SUBCODE,
    BGP_ERROR_UPDATE_MESSAGE_SUBCODE,
    BGP_ERROR_CONNECTION_REJECTED_SUBCODE
};
